"------------------------------XDG support------------------------------
if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

" If $VIMXDG is defined, that is an indication to, that will be used as an
" indication that we should follow the XDG Base Directory Specification.

if !empty($VIMXDG)
  if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME = $HOME."/.cache"      | endif
  if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"    | endif
  if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME = $HOME."/.local/share" | endif

  set runtimepath^=$XDG_CONFIG_HOME/vim
  set runtimepath+=$XDG_DATA_HOME/vim
  set runtimepath+=$XDG_CONFIG_HOME/vim/after

  set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
  set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

  let g:netrw_home = $XDG_DATA_HOME."/vim"
  call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)
  set viewdir=$XDG_DATA_HOME/vim/view | call mkdir(&viewdir, 'p', 0700)

  set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
  set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
  set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)

  " Neovim has its own special location
  if !has('nvim') 
    set viminfofile=$XDG_CACHE_HOME/vim/viminfo
  endif
endif

" analog of nvim's stdpath
fun! VimStdPath(what)
  if has('nvim')
    return stdpath(a:what)
  elseif !empty($VIMXDG)
    let result = get({
          \ 'data': $XDG_DATA_HOME."/vim",
          \ 'config': $XDG_CONFIG_HOME."/vim",
          \ 'cache': $XDG_CACHE_HOME."/vim"
          \}, a:what)
    return result
  else
    let result = get({
          \ 'data': '~/.vim',
          \ 'config': '~/.vim',
          \ 'cache': '~/.vim'
          \}, a:what)
    return result
endfun

"-----------------------------Config Options----------------------------
set nocompatible

let mapleader = " "

" enable syntax and plugins (for netrw, if we ever need it)
syntax on
filetype plugin indent on

set mouse=a

set encoding=utf-8
set fileencodings=utf-8

" enable fuzzy file finder
set path+=**          " enable fuzzy file search
set wildmenu          " enable fuzzy menu
set wildignore+=**/.git/**
set wildignore+=**/__pychache__/**
set wildignore+=**/venv/**
set wildignore+=**/node_modules/**
set wildignore+=**/dist/**.**/build/**
set wildignore+=*.o
set wildignore+=*.pyc
set wildignore+=*swp

" tabs, spaces, indenting
set nowrap
set autoindent
set smartindent
set cindent
set expandtab
set smarttab
set shiftwidth=2
set softtabstop=2
set backspace=indent,eol,start

" make vim behave 
set noswapfile
set nobackup
set splitbelow

set cursorline
set colorcolumn=80

" searching
set incsearch 
set hlsearch 
set ignorecase
set smartcase                     " Use ignore case if lowercase, not if search
                                  " term contains Uppercase 

set showcmd
set shortmess=aoOtTI
set clipboard=unnamedplus

set matchpairs+=<:>               " Use % to jump between html tags as well
set hidden
set nolist

" saves the current cursor position, so that we can get back where we
" left off
let &viminfo="'10,\"100,:20,%,n".&viminfofile
augroup restoreline
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
augroup END

" Fast rendering
set ttyfast
"------------------------Personal Key-bindings--------------------------

" Toggle White space character rendering
nnoremap <leader>tl :set list!<CR>
set listchars=tab:>·,trail:~,extends:>,precedes:<,space:·,eol:↩

" reloads vimrc
nnoremap <F5> :source $MYVIMRC<CR>

" Increment and decrement numbers using arrow keys
nnoremap <Up> <C-a>
nnoremap <Down> <C-x>

" Consistent with D and C
nnoremap Y y$ 

" remove search highlighting
nnoremap <esc><esc> :silent! nohls<cr>

" execute the current paragraph and print the output bellow the paragraph
" itself (paragraph must be a bash command)

nnoremap <leader>cp yip}o# OUTPUT:<esc>o<esc>p!ipbash<CR>

" Buffer Operations

nnoremap <leader>bl :buffers<CR>
nnoremap <leader>bn :bn<CR>
nnoremap <leader>bp :bp<CR>
nnoremap <leader>bd :bd<CR>

" Opening files using fuzzy names
nnoremap <leader>f :find<space>

" Compile and open quickfix window
nnoremap <leader>cb :silent! make\|copen<CR>:redraw!<CR>

"--------------------------------Plugins--------------------------------
let data_dir = VimStdPath('data')
let plug_path = data_dir . '/autoload/plug.vim'

" I prefer to manually call this function to automatically download Plug and 
" install all plugins if on a new system.
function! GetPlug()
  " Taken from https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
  silent execute '!curl -fLo '.g:plug_path.' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endfunction

" Enable and configure plugins only if plug.vim is installed
if !empty(glob(plug_path))
  " Plugins
  call plug#begin('~/.local/share/vim/plugins')

    " TMUX integration
    Plug 'christoomey/vim-tmux-navigator'

    " Language Server support
    Plug 'natebosch/vim-lsc'

    " Status line
    Plug 'itchyny/lightline.vim'

    " Color Schemes
    Plug 'NLKNguyen/papercolor-theme'

    " Debugging
    Plug 'puremourning/vimspector'

    " Essentials
    Plug 'tpope/vim-surround'
    Plug 'jiangmiao/auto-pairs'

    " Better syntax highlighting
    Plug 'sheerun/vim-polyglot'

    " Fetch Git Branch
    Plug 'itchyny/vim-gitbranch'

  call plug#end()


  " TMUX navigation settings
  let g:tmux_navigator_save_on_switch = 2
  let g:tmux_navigator_disable_when_zoomed = 1

  let g:tmux_navigator_no_mappings = 1
  
  nnoremap <silent> <c-a>h :TmuxNavigateLeft<cr>
  nnoremap <silent> <c-a>j :TmuxNavigateDown<cr>
  nnoremap <silent> <c-a>k :TmuxNavigateUp<cr>
  nnoremap <silent> <c-a>l :TmuxNavigateRight<cr>
  nnoremap <silent> <c-a>p :TmuxNavigatePrevious<cr>

  " ColorScheme Settings
  if exists('+termguicolors') && ($TERM == "xterm-256color" || $TERM == "tmux-256color" || $TERM == 'alacritty')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
    set termguicolors
  endif

  set background=dark

  let g:PaperColor_Theme_Options = {
        \ 'theme': {
          \ 'default.dark': {
            \ 'override' : {
              \ 'color00' : ['#131517', ''],
            \ }
          \ }
        \ }
      \ }

  colorscheme PaperColor

  " status line settings
  set laststatus=2
  let g:lightline = {
        \ 'colorscheme' : 'one',
        \ 'active': {
          \ 'left': [ [ 'mode', 'paste'],
          \           [ 'readonly','relativepath', 'modified'],
          \           [ 'gitbranch', 'lsc' ] ],
          \},
        \ 'component_function': {
          \ 'lsc': 'LightlineLSCStatus',
          \ 'gitbranch': 'GitBranch'
          \},
        \ 'mode_map': {
          \ 'n' : 'N',
          \ 'i' : 'I',
          \ 'R' : 'R',
          \ 'v' : 'V',
          \ 'V' : 'VL',
          \ "\<C-v>": 'VB',
          \ 'c' : 'C',
          \ 's' : 'S',
          \ 'S' : 'SL',
          \ "\<C-s>": 'SB',
          \ 't': 'T',
          \},
        \}

  function! LightlineLSCStatus()
    let status = LSCServerStatus()
    return status !=# '' ? '  '.status : ''
  endfunction

  function! GitBranch()
    let name = gitbranch#name()
    return name !=# '' ? ' '. name : ''
  endfunction

  set noshowmode

  " markdown 
  augroup markdown
    au BufRead *.md :setlocal filetype=markdown
  augroup END
  let g:markdown_fenced_languages = ['shell', 'python']

  " Language support (LSP) via vim-lsc

  let g:lsc_server_commands = {
        \ 'rust': {
          \ 'command': 'rust-analyzer'
          \} ,
        \ 'cpp': {
          \ 'command': 'clangd --background-index',
          \ 'suppress_stderr': v:true
          \ },
        \ 'haskell': {
          \ 'command': 'stack exec haskell-language-server-wrapper -- --lsp'
          \},
        \ 'c': {
          \ 'command': 'clangd --background-index',
          \ 'suppress_stderr': v:true
          \ },
        \ 'python' : 'pyls',
        \}


  let g:lsc_auto_map = {
        \ 'GoToDefinition': 'gd',
        \ 'FindReferences': 'gr',
        \ 'Rename': 'gR',
        \ 'ShowHover': 'K',
        \ 'FindCodeActions': 'ga',
        \ 'Completion': 'omnifunc',
        \}
  let g:lsc_hover_popup = v:false

  set completeopt=menu,menuone,noselect,noinsert

  let g:lsc_enable_autocomplete = v:true
  let g:lsc_enable_diagnostics = v:true
  let g:lsc_reference_highlights = v:false
  let g:lsc_trace_level = 'off'

  set signcolumn=number

  " Auto-Formatting code on save
  function! FormatBuffer(cmd)
    if &modified
      let cursor_pos = getpos('.')
      execute "%!" . a:cmd
      if v:shell_error | undo | endif
      call setpos('.', cursor_pos)
    endif
  endfunction

  augroup autoformat
    au!
    if executable("clang-format")
      au BufWritePre *.c,*.cpp,*.h,*.hpp,*.cxx,*.hxx silent call FormatBuffer("clang-format")
    endif
    if executable("rustfmt")
      au BufWritePre *.rs silent call FormatBuffer("rustfmt -q")
    endif
    " if executable("black")
    "   au BufWritePre *.py silent call FormatBuffer("black -q -")
    " endif
  augroup END

  " Code folding
  set nofoldenable
  set foldtext=MyFoldText()
  function! MyFoldText()
    let line = getline(v:foldstart)
    let foldedlinecount = v:foldend - v:foldstart + 1
    return ' «» '. foldedlinecount . ' ' . line
  endfunction
  set fillchars=fold:\ 

  " fold color
  hi Folded term=standout ctermfg=7 ctermbg=8 guifg=#777272 guibg=#1b1d1f

  " Debugging using Vimspector
  let g:vimspector_install_gadgets = ['CodeLLDB', 'vscode-cpptools', 'lldb-vscode']

  nmap <leader>dd <Plug>VimspectorContinue
  nmap <leader>dx <Plug>VimspectorStop
  nmap <leader>dX <Plug>VimspectorReset
  nmap <leader>dR <Plug>VimspectorRestart
  nmap <leader>dp <Plug>VimspectorPause
  nmap <leader>dbt <Plug>VimspectorToggleBreakpoint
  nmap <leader>dbc <Plug>VimspectorToggleConditionalBreakpoint
  nmap <leader>drc <Plug>VimspectorRunToCursor
  nmap <leader>dn <Plug>VimspectorStepOver
  nmap <leader>ds <Plug>VimspectorStepInto
  nmap <leader>du <Plug>VimspectorStepOut
  nmap <leader>di <Plug>VimspectorBalloonEval
  xmap <leader>di <Plug>VimspectorBalloonEval

endif

"-------------------Syntax Highlighting Modifications-------------------
hi Error term=underline cterm=underline ctermbg=None ctermfg=4 guifg=#ff0000 gui=underline
hi ColorColumn term=reverse ctermbg=1 guibg=#121212

"---------------------------Usefull Functions---------------------------

" Displays all the syntax rules for current cursor position, useful when
" writing vimscript syntax plugins, or modifying highlight colors.
" Taken from https://github.com/rwxrob/dot
if has("syntax")
  function! SynStack()
    if !exists("*synstack")
      return
    endif
    echo map(synstack(line('.'),col('.')), 'synIDattr(v:val, "name")')
  endfunction
endif

"----------------------NETRW -- if I ever need it-----------------------
let g:netrw_banner = 0        " disable the banner
let g:netrw_liststyle = 3     " tree view
let g:netrw_altv = 1          " open splits to the right
let g:netrw_browse_split = 4  " open in prior window
let g:netrw_winsize = 25

