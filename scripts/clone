#!/usr/bin/bash
set -e

# Used to clone a new git repo into the correct location, making any
# directories when needed. 

# Depends on:
# - git

# root directory where all git repos will be placed
: "${REPOS_DIR:="$HOME/repos"}" 

clone() {
  local repo_url="$1"

  # example url: git@github.com:deyloop/notebox.git
  # TODO: add support for urls starting with https://
  # TODO: allow omission of hostname and protocol

  # validate url
  local regex='^git@([-A-Za-z.]*):([-A-Za-z0-9_-]*)/([-A-Za-z0-9_/]*)(.git)?$'
  if [[ ! $repo_url =~ $regex ]]; then
    echo 'Repo url format not supported. Clone manually.'
    exit
  fi

  # extract the host, username and reponame
  local host reponame username

  host="${BASH_REMATCH[1]}"
  username="${BASH_REMATCH[2]}"
  reponame="${BASH_REMATCH[3]}"

  local clone_path="$REPOS_DIR/$host/$username/$reponame"

  # create the clone path (parents created too, if not already there)
  mkdir -p "$clone_path"

  # perform the clone
  if ! git clone "$repo_url" "$clone_path"; then
    rmdir -p --ignore-fail-on-non-empty "$clone_path"
    echo "Clone failed"
    exit
  fi

  echo "Clone complete"
}

if [[ $# -ne 1 ]]; then
  echo "USAGE: ${0##*/} url"
  exit 1
fi


clone "$@"
