#!/usr/bin/bash
set -e
shopt -s extglob

: "${GITHUB_USER:="$USER"}"
: "${REPOS_DIR:="$HOME/repos"}"
: "${NOTEBOX_ROOT_DIR:="$REPOS_DIR/github.com/$GITHUB_USER/notebox"}"
: "${EDITOR:=vim}"
: "${EXE:="${0##*/}"}"

x.get() {
  local arg="$*"
  if [[ $arg =~ ^[0-9]{14,}$ ]]; then
    echo "$1"
  elif [[ $arg = last ]]; then
    last="$(x.last)"
    [[ -n "$last" ]] && echo "$last"
  else
    mapfile -t matches < <(x.search "$@")
    (( ${#matches[@]} > 0 )) || return 1
    if (( ${#matches[@]} == 1 )); then
      echo "${matches[0]%% *}"
      return
    fi
    select match in "${matches[@]}"; do
      echo "${match%% *}"
      return $?
    done
  fi
}

x.commit(){
  local id ans

  id="$(x.get "$@")"
  
  read -rp "Commit? " ans
  if [[ $ans =~ [Yy].* ]]; then
    cd "$NOTEBOX_ROOT_DIR" && \
    git add "$id" && \
    git commit -m "$(x.title "$id")" >/dev/null && \
    git push >/dev/null
    echo "notebox commited and pushed"
  fi
}

x.new() {
  local title note_dir id
  title="$*"

  id="$(__isosec)" 
  note_dir="$NOTEBOX_ROOT_DIR/$id"
  mkdir -p "$note_dir"

  if [[ -z $title ]]; then return; fi

  echo "# $title" >> "$note_dir/README.md"
  command $EDITOR "$note_dir/README.md"

  x.commit "$id"
}

x.search() {
  cd "$NOTEBOX_ROOT_DIR"

  local searchterms results

  searchterms="$*"
  results="$( git grep --color -nir "${searchterms//\ /\.\*}" )"

  local -A resultFiles
  while IFS= read -r line
  do
    if [[ $line =~ ([^:]*):(.*) ]]; then
      local file_name="${BASH_REMATCH[1]}"
      local result_line="${BASH_REMATCH[2]}"

      resultFiles[${file_name%/*}]+="$result_line"
      resultFiles[${file_name%/*}]+=$'\n'
    fi
  done <<< "$results"
  
  for i in "${!resultFiles[@]}"
  do
    echo "$i $(x.title "$i")"
    # echo "${resultFiles[$i]}"
  done
}

x.title() {
  local id tittle
  id="$(x.get "$@")"
  
  title="$(head -1 "$id/README.md")"
  echo "${title### }"
}

x.list() {
  cd "$NOTEBOX_ROOT_DIR"
  for dir in $(x.list.ids); do
    printf "%s %s\n" "$dir" "$(x.title "$dir")"
  done
}

x.list.ids() {
  cd "$NOTEBOX_ROOT_DIR"
  local list
  list=$(ls -1 -d ./*/)
  list="${list//\.\//}"
  list="${list//\//}"
  echo "$list"
}

x.last() {
  x.list.ids | tail -1
}

x.open() {
  local id
  id="$(x.get "$@")"
  
  command $EDITOR "$NOTEBOX_ROOT_DIR/$id/README.md"
}

x.edit() {
  local id
  id="$(x.get "$@")"

  x.open "${id##*/}"
  x.commit "$id"

}

x.pull() {
  cd "$NOTEBOX_ROOT_DIR" && \
  git pull >/dev/null

  echo "notebox synced"
}

x.mdlink() {
  __line_filter "$@" && return $?

  # TODO: Add support for converting a bare link into a markdown link

  local line id title
  line="$*"
  id="${line%% *}"
  tittle="${line#* }"

  echo "* [$id](../$id/README.md) $tittle"
}

x.mdreflink() {
  __line_filter "$@" && return $?

  local line id title
  line="$*"
  id="${line%% *}"
  tittle="${line#* }"

  echo "[1]: ../$id/README.md \"$tittle\""
}

x.ghlink() {
  __line_filter "$@" && return $?

  local line id title
  line="$*"
  id="${line%% *}"

  echo "https://github.com/$GITHUB_USER/notebox/tree/main/$id"
}

x.ghsearch() {
  __line_filter "$@" && return $?

  local search_terms="$*"

  echo "https://github.com/$GITHUB_USER/notebox/search/?q=${search_terms//\ /\+}"
}


#---------------------------------Utils---------------------------------

__isosec(){
  date -u +%Y%m%d%H%M%S
}

__line_filter() {
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}


#-----------------------completion and delegation-----------------------
#                   use `complete -C nb nb` in bashrc

# Obtain all subcommands
while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue 
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# Completion output
if [[ -n $COMP_LINE  ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

# Delegation
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

echo "nb"
